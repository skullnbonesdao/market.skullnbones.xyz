# This file was generated. Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"columns and relationships of \"cursors\""
type cursors {
    block: bigint
    end_block: bigint
    id: String!
    start_block: bigint
    value: String
}

"aggregated selection of \"cursors\""
type cursors_aggregate {
    aggregate: cursors_aggregate_fields
    nodes: [cursors!]!
}

"aggregate fields of \"cursors\""
type cursors_aggregate_fields {
    avg: cursors_avg_fields
    count(columns: [cursors_select_column!], distinct: Boolean): Int!
    max: cursors_max_fields
    min: cursors_min_fields
    stddev: cursors_stddev_fields
    stddev_pop: cursors_stddev_pop_fields
    stddev_samp: cursors_stddev_samp_fields
    sum: cursors_sum_fields
    var_pop: cursors_var_pop_fields
    var_samp: cursors_var_samp_fields
    variance: cursors_variance_fields
}

"aggregate avg on columns"
type cursors_avg_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"aggregate max on columns"
type cursors_max_fields {
    block: bigint
    end_block: bigint
    id: String
    start_block: bigint
    value: String
}

"aggregate min on columns"
type cursors_min_fields {
    block: bigint
    end_block: bigint
    id: String
    start_block: bigint
    value: String
}

"response of any mutation on the table \"cursors\""
type cursors_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [cursors!]!
}

"aggregate stddev on columns"
type cursors_stddev_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"aggregate stddev_pop on columns"
type cursors_stddev_pop_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"aggregate stddev_samp on columns"
type cursors_stddev_samp_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"aggregate sum on columns"
type cursors_sum_fields {
    block: bigint
    end_block: bigint
    start_block: bigint
}

"aggregate var_pop on columns"
type cursors_var_pop_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"aggregate var_samp on columns"
type cursors_var_samp_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"aggregate variance on columns"
type cursors_variance_fields {
    block: Float
    end_block: Float
    start_block: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"cursors\""
    delete_cursors(
        "filter the rows which have to be deleted"
        where: cursors_bool_exp!
    ): cursors_mutation_response
    "delete single row from the table: \"cursors\""
    delete_cursors_by_pk(id: String!): cursors
    "delete data from the table: \"trades\""
    delete_trades(
        "filter the rows which have to be deleted"
        where: trades_bool_exp!
    ): trades_mutation_response
    "delete single row from the table: \"trades\""
    delete_trades_by_pk(pk: String!): trades
    "delete data from the table: \"users\""
    delete_users(
        "filter the rows which have to be deleted"
        where: users_bool_exp!
    ): users_mutation_response
    "delete single row from the table: \"users\""
    delete_users_by_pk(id: uuid!): users
    "insert data into the table: \"cursors\""
    insert_cursors(
        "the rows to be inserted"
        objects: [cursors_insert_input!]!,
        "upsert condition"
        on_conflict: cursors_on_conflict
    ): cursors_mutation_response
    "insert a single row into the table: \"cursors\""
    insert_cursors_one(
        "the row to be inserted"
        object: cursors_insert_input!,
        "upsert condition"
        on_conflict: cursors_on_conflict
    ): cursors
    "insert data into the table: \"trades\""
    insert_trades(
        "the rows to be inserted"
        objects: [trades_insert_input!]!,
        "upsert condition"
        on_conflict: trades_on_conflict
    ): trades_mutation_response
    "insert a single row into the table: \"trades\""
    insert_trades_one(
        "the row to be inserted"
        object: trades_insert_input!,
        "upsert condition"
        on_conflict: trades_on_conflict
    ): trades
    "insert data into the table: \"users\""
    insert_users(
        "the rows to be inserted"
        objects: [users_insert_input!]!,
        "upsert condition"
        on_conflict: users_on_conflict
    ): users_mutation_response
    "insert a single row into the table: \"users\""
    insert_users_one(
        "the row to be inserted"
        object: users_insert_input!,
        "upsert condition"
        on_conflict: users_on_conflict
    ): users
    "update data of the table: \"cursors\""
    update_cursors(
        "increments the numeric columns with given value of the filtered values"
        _inc: cursors_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: cursors_set_input,
        "filter the rows which have to be updated"
        where: cursors_bool_exp!
    ): cursors_mutation_response
    "update single row of the table: \"cursors\""
    update_cursors_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: cursors_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: cursors_set_input,
        pk_columns: cursors_pk_columns_input!
    ): cursors
    "update multiples rows of table: \"cursors\""
    update_cursors_many(
        "updates to execute, in order"
        updates: [cursors_updates!]!
    ): [cursors_mutation_response]
    "update data of the table: \"trades\""
    update_trades(
        "increments the numeric columns with given value of the filtered values"
        _inc: trades_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: trades_set_input,
        "filter the rows which have to be updated"
        where: trades_bool_exp!
    ): trades_mutation_response
    "update single row of the table: \"trades\""
    update_trades_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: trades_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: trades_set_input,
        pk_columns: trades_pk_columns_input!
    ): trades
    "update multiples rows of table: \"trades\""
    update_trades_many(
        "updates to execute, in order"
        updates: [trades_updates!]!
    ): [trades_mutation_response]
    "update data of the table: \"users\""
    update_users(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        "filter the rows which have to be updated"
        where: users_bool_exp!
    ): users_mutation_response
    "update single row of the table: \"users\""
    update_users_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        pk_columns: users_pk_columns_input!
    ): users
    "update multiples rows of table: \"users\""
    update_users_many(
        "updates to execute, in order"
        updates: [users_updates!]!
    ): [users_mutation_response]
}

type query_root {
    "fetch data from the table: \"cursors\""
    cursors(
        "distinct select on columns"
        distinct_on: [cursors_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [cursors_order_by!],
        "filter the rows returned"
        where: cursors_bool_exp
    ): [cursors!]!
    "fetch aggregated fields from the table: \"cursors\""
    cursors_aggregate(
        "distinct select on columns"
        distinct_on: [cursors_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [cursors_order_by!],
        "filter the rows returned"
        where: cursors_bool_exp
    ): cursors_aggregate!
    "fetch data from the table: \"cursors\" using primary key columns"
    cursors_by_pk(id: String!): cursors
    "fetch data from the table: \"trades\""
    trades(
        "distinct select on columns"
        distinct_on: [trades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [trades_order_by!],
        "filter the rows returned"
        where: trades_bool_exp
    ): [trades!]!
    "fetch aggregated fields from the table: \"trades\""
    trades_aggregate(
        "distinct select on columns"
        distinct_on: [trades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [trades_order_by!],
        "filter the rows returned"
        where: trades_bool_exp
    ): trades_aggregate!
    "fetch data from the table: \"trades\" using primary key columns"
    trades_by_pk(pk: String!): trades
    "fetch data from the table: \"users\""
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
}

type subscription_root {
    "fetch data from the table: \"cursors\""
    cursors(
        "distinct select on columns"
        distinct_on: [cursors_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [cursors_order_by!],
        "filter the rows returned"
        where: cursors_bool_exp
    ): [cursors!]!
    "fetch aggregated fields from the table: \"cursors\""
    cursors_aggregate(
        "distinct select on columns"
        distinct_on: [cursors_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [cursors_order_by!],
        "filter the rows returned"
        where: cursors_bool_exp
    ): cursors_aggregate!
    "fetch data from the table: \"cursors\" using primary key columns"
    cursors_by_pk(id: String!): cursors
    "fetch data from the table in a streaming manner: \"cursors\""
    cursors_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [cursors_stream_cursor_input]!,
        "filter the rows returned"
        where: cursors_bool_exp
    ): [cursors!]!
    "fetch data from the table: \"trades\""
    trades(
        "distinct select on columns"
        distinct_on: [trades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [trades_order_by!],
        "filter the rows returned"
        where: trades_bool_exp
    ): [trades!]!
    "fetch aggregated fields from the table: \"trades\""
    trades_aggregate(
        "distinct select on columns"
        distinct_on: [trades_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [trades_order_by!],
        "filter the rows returned"
        where: trades_bool_exp
    ): trades_aggregate!
    "fetch data from the table: \"trades\" using primary key columns"
    trades_by_pk(pk: String!): trades
    "fetch data from the table in a streaming manner: \"trades\""
    trades_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [trades_stream_cursor_input]!,
        "filter the rows returned"
        where: trades_bool_exp
    ): [trades!]!
    "fetch data from the table: \"users\""
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: uuid!): users
    "fetch data from the table in a streaming manner: \"users\""
    users_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [users_stream_cursor_input]!,
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
}

"columns and relationships of \"trades\""
type trades {
    asset_change: float8!
    asset_mint: String!
    asset_receiving_wallet: String!
    block: bigint!
    currency_change: float8!
    currency_mint: String!
    market_fee: float8!
    order_initializer: String!
    order_taker: String!
    pk: String!
    price: float8!
    signature: String!
    symbol: String!
    timestamp: bigint!
    timestamp_ts: timestamp!
    total_cost: float8!
}

"aggregated selection of \"trades\""
type trades_aggregate {
    aggregate: trades_aggregate_fields
    nodes: [trades!]!
}

"aggregate fields of \"trades\""
type trades_aggregate_fields {
    avg: trades_avg_fields
    count(columns: [trades_select_column!], distinct: Boolean): Int!
    max: trades_max_fields
    min: trades_min_fields
    stddev: trades_stddev_fields
    stddev_pop: trades_stddev_pop_fields
    stddev_samp: trades_stddev_samp_fields
    sum: trades_sum_fields
    var_pop: trades_var_pop_fields
    var_samp: trades_var_samp_fields
    variance: trades_variance_fields
}

"aggregate avg on columns"
type trades_avg_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"aggregate max on columns"
type trades_max_fields {
    asset_change: float8
    asset_mint: String
    asset_receiving_wallet: String
    block: bigint
    currency_change: float8
    currency_mint: String
    market_fee: float8
    order_initializer: String
    order_taker: String
    pk: String
    price: float8
    signature: String
    symbol: String
    timestamp: bigint
    timestamp_ts: timestamp
    total_cost: float8
}

"aggregate min on columns"
type trades_min_fields {
    asset_change: float8
    asset_mint: String
    asset_receiving_wallet: String
    block: bigint
    currency_change: float8
    currency_mint: String
    market_fee: float8
    order_initializer: String
    order_taker: String
    pk: String
    price: float8
    signature: String
    symbol: String
    timestamp: bigint
    timestamp_ts: timestamp
    total_cost: float8
}

"response of any mutation on the table \"trades\""
type trades_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [trades!]!
}

"aggregate stddev on columns"
type trades_stddev_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"aggregate stddev_pop on columns"
type trades_stddev_pop_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"aggregate stddev_samp on columns"
type trades_stddev_samp_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"aggregate sum on columns"
type trades_sum_fields {
    asset_change: float8
    block: bigint
    currency_change: float8
    market_fee: float8
    price: float8
    timestamp: bigint
    total_cost: float8
}

"aggregate var_pop on columns"
type trades_var_pop_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"aggregate var_samp on columns"
type trades_var_samp_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"aggregate variance on columns"
type trades_variance_fields {
    asset_change: Float
    block: Float
    currency_change: Float
    market_fee: Float
    price: Float
    timestamp: Float
    total_cost: Float
}

"columns and relationships of \"users\""
type users {
    email: String!
    id: uuid!
    name: String!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int!
    max: users_max_fields
    min: users_min_fields
}

"aggregate max on columns"
type users_max_fields {
    email: String
    id: uuid
    name: String
}

"aggregate min on columns"
type users_min_fields {
    email: String
    id: uuid
    name: String
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [users!]!
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"unique or primary key constraints on table \"cursors\""
enum cursors_constraint {
    "unique or primary key constraint on columns \"id\""
    cursors_pkey
}

"select columns of table \"cursors\""
enum cursors_select_column {
    "column name"
    block
    "column name"
    end_block
    "column name"
    id
    "column name"
    start_block
    "column name"
    value
}

"update columns of table \"cursors\""
enum cursors_update_column {
    "column name"
    block
    "column name"
    end_block
    "column name"
    id
    "column name"
    start_block
    "column name"
    value
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"trades\""
enum trades_constraint {
    "unique or primary key constraint on columns \"pk\""
    trades_pkey
}

"select columns of table \"trades\""
enum trades_select_column {
    "column name"
    asset_change
    "column name"
    asset_mint
    "column name"
    asset_receiving_wallet
    "column name"
    block
    "column name"
    currency_change
    "column name"
    currency_mint
    "column name"
    market_fee
    "column name"
    order_initializer
    "column name"
    order_taker
    "column name"
    pk
    "column name"
    price
    "column name"
    signature
    "column name"
    symbol
    "column name"
    timestamp
    "column name"
    timestamp_ts
    "column name"
    total_cost
}

"update columns of table \"trades\""
enum trades_update_column {
    "column name"
    asset_change
    "column name"
    asset_mint
    "column name"
    asset_receiving_wallet
    "column name"
    block
    "column name"
    currency_change
    "column name"
    currency_mint
    "column name"
    market_fee
    "column name"
    order_initializer
    "column name"
    order_taker
    "column name"
    pk
    "column name"
    price
    "column name"
    signature
    "column name"
    symbol
    "column name"
    timestamp
    "column name"
    timestamp_ts
    "column name"
    total_cost
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    "unique or primary key constraint on columns \"id\""
    users_pkey
}

"select columns of table \"users\""
enum users_select_column {
    "column name"
    email
    "column name"
    id
    "column name"
    name
}

"update columns of table \"users\""
enum users_update_column {
    "column name"
    email
    "column name"
    id
    "column name"
    name
}

scalar bigint

scalar float8

scalar timestamp

scalar uuid

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to compare columns of type \"bigint\". All fields are combined with logical 'AND'."
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

"Boolean expression to filter rows from the table \"cursors\". All fields are combined with a logical 'AND'."
input cursors_bool_exp {
    _and: [cursors_bool_exp!]
    _not: cursors_bool_exp
    _or: [cursors_bool_exp!]
    block: bigint_comparison_exp
    end_block: bigint_comparison_exp
    id: String_comparison_exp
    start_block: bigint_comparison_exp
    value: String_comparison_exp
}

"input type for incrementing numeric columns in table \"cursors\""
input cursors_inc_input {
    block: bigint
    end_block: bigint
    start_block: bigint
}

"input type for inserting data into table \"cursors\""
input cursors_insert_input {
    block: bigint
    end_block: bigint
    id: String
    start_block: bigint
    value: String
}

"on_conflict condition type for table \"cursors\""
input cursors_on_conflict {
    constraint: cursors_constraint!
    update_columns: [cursors_update_column!]! = []
    where: cursors_bool_exp
}

"Ordering options when selecting data from \"cursors\"."
input cursors_order_by {
    block: order_by
    end_block: order_by
    id: order_by
    start_block: order_by
    value: order_by
}

"primary key columns input for table: cursors"
input cursors_pk_columns_input {
    id: String!
}

"input type for updating data in table \"cursors\""
input cursors_set_input {
    block: bigint
    end_block: bigint
    id: String
    start_block: bigint
    value: String
}

"Streaming cursor of the table \"cursors\""
input cursors_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: cursors_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input cursors_stream_cursor_value_input {
    block: bigint
    end_block: bigint
    id: String
    start_block: bigint
    value: String
}

input cursors_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: cursors_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: cursors_set_input
    "filter the rows which have to be updated"
    where: cursors_bool_exp!
}

"Boolean expression to compare columns of type \"float8\". All fields are combined with logical 'AND'."
input float8_comparison_exp {
    _eq: float8
    _gt: float8
    _gte: float8
    _in: [float8!]
    _is_null: Boolean
    _lt: float8
    _lte: float8
    _neq: float8
    _nin: [float8!]
}

"Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'."
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}

"Boolean expression to filter rows from the table \"trades\". All fields are combined with a logical 'AND'."
input trades_bool_exp {
    _and: [trades_bool_exp!]
    _not: trades_bool_exp
    _or: [trades_bool_exp!]
    asset_change: float8_comparison_exp
    asset_mint: String_comparison_exp
    asset_receiving_wallet: String_comparison_exp
    block: bigint_comparison_exp
    currency_change: float8_comparison_exp
    currency_mint: String_comparison_exp
    market_fee: float8_comparison_exp
    order_initializer: String_comparison_exp
    order_taker: String_comparison_exp
    pk: String_comparison_exp
    price: float8_comparison_exp
    signature: String_comparison_exp
    symbol: String_comparison_exp
    timestamp: bigint_comparison_exp
    timestamp_ts: timestamp_comparison_exp
    total_cost: float8_comparison_exp
}

"input type for incrementing numeric columns in table \"trades\""
input trades_inc_input {
    asset_change: float8
    block: bigint
    currency_change: float8
    market_fee: float8
    price: float8
    timestamp: bigint
    total_cost: float8
}

"input type for inserting data into table \"trades\""
input trades_insert_input {
    asset_change: float8
    asset_mint: String
    asset_receiving_wallet: String
    block: bigint
    currency_change: float8
    currency_mint: String
    market_fee: float8
    order_initializer: String
    order_taker: String
    pk: String
    price: float8
    signature: String
    symbol: String
    timestamp: bigint
    timestamp_ts: timestamp
    total_cost: float8
}

"on_conflict condition type for table \"trades\""
input trades_on_conflict {
    constraint: trades_constraint!
    update_columns: [trades_update_column!]! = []
    where: trades_bool_exp
}

"Ordering options when selecting data from \"trades\"."
input trades_order_by {
    asset_change: order_by
    asset_mint: order_by
    asset_receiving_wallet: order_by
    block: order_by
    currency_change: order_by
    currency_mint: order_by
    market_fee: order_by
    order_initializer: order_by
    order_taker: order_by
    pk: order_by
    price: order_by
    signature: order_by
    symbol: order_by
    timestamp: order_by
    timestamp_ts: order_by
    total_cost: order_by
}

"primary key columns input for table: trades"
input trades_pk_columns_input {
    pk: String!
}

"input type for updating data in table \"trades\""
input trades_set_input {
    asset_change: float8
    asset_mint: String
    asset_receiving_wallet: String
    block: bigint
    currency_change: float8
    currency_mint: String
    market_fee: float8
    order_initializer: String
    order_taker: String
    pk: String
    price: float8
    signature: String
    symbol: String
    timestamp: bigint
    timestamp_ts: timestamp
    total_cost: float8
}

"Streaming cursor of the table \"trades\""
input trades_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: trades_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input trades_stream_cursor_value_input {
    asset_change: float8
    asset_mint: String
    asset_receiving_wallet: String
    block: bigint
    currency_change: float8
    currency_mint: String
    market_fee: float8
    order_initializer: String
    order_taker: String
    pk: String
    price: float8
    signature: String
    symbol: String
    timestamp: bigint
    timestamp_ts: timestamp
    total_cost: float8
}

input trades_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: trades_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: trades_set_input
    "filter the rows which have to be updated"
    where: trades_bool_exp!
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp!]
    _not: users_bool_exp
    _or: [users_bool_exp!]
    email: String_comparison_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
}

"input type for inserting data into table \"users\""
input users_insert_input {
    email: String
    id: uuid
    name: String
}

"on_conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]! = []
    where: users_bool_exp
}

"Ordering options when selecting data from \"users\"."
input users_order_by {
    email: order_by
    id: order_by
    name: order_by
}

"primary key columns input for table: users"
input users_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"users\""
input users_set_input {
    email: String
    id: uuid
    name: String
}

"Streaming cursor of the table \"users\""
input users_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: users_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input users_stream_cursor_value_input {
    email: String
    id: uuid
    name: String
}

input users_updates {
    "sets the columns of the filtered rows to the given values"
    _set: users_set_input
    "filter the rows which have to be updated"
    where: users_bool_exp!
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}
